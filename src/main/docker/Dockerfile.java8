

######################################################################################################
FROM azul/zulu-openjdk-alpine:8u232-jre-headless AS STAGING-WAR
ARG DEPENDENCIES=docker-workdir

RUN mkdir -p /staging/app/

# Stage dependencies and classes
COPY ${DEPENDENCIES}/js                   /staging/app/js
COPY ${DEPENDENCIES}/META-INF             /staging/app/META-INF
COPY ${DEPENDENCIES}/WEB-INF              /staging/app/WEB-INF
COPY ${DEPENDENCIES}/callTo.html \
     ${DEPENDENCIES}/general-error.jsp \
     ${DEPENDENCIES}/index.html \
     ${DEPENDENCIES}/videochat.html \
     ${DEPENDENCIES}/run-java.sh          /staging/app/

# Assign execution permission to fabric8's run-java.sh script
RUN chmod 755 /staging/app/run-java.sh


######################################################################################################
FROM azul/zulu-openjdk-alpine:8u232-jre-headless
ARG JAVA_MAIN_CLASS

# JAVA_HOME needs to be set:
#   adoptopenjdk: /opt/java/openjdk
#   zulu: /usr/lib/jvm/zulu-8  or zulu8-ca

ENV ENV_JAVA_MAIN_CLASS=${JAVA_MAIN_CLASS} \
    JAVA_HOME=/usr/lib/jvm/zulu-8

ENV PATH=$PATH:$JAVA_HOME/bin

# Copy staged decompressed WAR from previous stage
COPY --from=STAGING-WAR /staging/app  /app

# Entry with exec so jvm flags are correctly gathered
ENTRYPOINT exec java -cp /app/WEB-INF/classes:/app/WEB-INF/lib/*:/app/WEB-INF/lib-provided/* ${ENV_JAVA_MAIN_CLASS}

# Entry using fabric8's run-java.sh
#ENTRYPOINT JAVA_OPTIONS="${JAVA_OPTS}" \
#           JAVA_APP_DIR=/app \
#           JAVA_CLASSPATH=/app/WEB-INF/classes:/app/WEB-INF/lib/*:/app/WEB-INF/lib-provided/* \
#           JAVA_MAIN_CLASS=${ENV_JAVA_MAIN_CLASS} \
#           /app/run-java.sh
