<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
	<modelVersion>4.0.0</modelVersion>
	<artifactId>signaling</artifactId>
	<groupId>org.fabri1983</groupId>
	<version>1.0.0</version>
	<packaging>war</packaging>
	<name>signaling</name>
	<description>Signaling Server for WebRTC</description>
	
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.6.RELEASE</version>
	</parent>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>12</java.version> <!-- overrides value from Spring Boot's defaults -->
		<maven.compiler.source>8</maven.compiler.source>
		<maven.compiler.target>12</maven.compiler.target>
		<maven.compiler.release>12</maven.compiler.release>
		
		<!-- default flag values -->
		<skip.docker.build>false</skip.docker.build>
		<skip.proguard>true</skip.proguard>
		
		<!-- Signaling Server -->
		<start-class>org.fabri1983.signaling.entrypoint.SignalingEntryPoint</start-class>
		<logger.console.ouput>true</logger.console.ouput> <!-- used on logback.xml -->
		<spring.profiles.active>default</spring.profiles.active> <!-- default spring profile. Overridden by eventbus-<type> profiles -->
		<nextrtc.signaling.server.version>1.0.0-RC4</nextrtc.signaling.server.version> <!-- NOTE: since version 1.0.0-RC5 it replaces Session dependency by custom Connection class -->
		<auth0.jwt.version>3.8.1</auth0.jwt.version>
		<hazelcast.version>3.12.2</hazelcast.version> <!-- overrides value from Spring Boot's defaults -->
		
		<!-- NextRTC Video Chat page -->
		<turn.no.auth.user>turnUser</turn.no.auth.user>
		<turn.no.auth.pass>turnUserPassword</turn.no.auth.pass>
		<turn.auth.secret.user>turnAuthUser</turn.auth.secret.user>
		<turn.auth.secret.pass>turnAuthUserPassword</turn.auth.secret.pass>
		<signaling.path>/signaling/v1/s</signaling.path>
		<signaling.insecure.path>/signaling/v1/s-insecure</signaling.insecure.path>
		<api.rest.videochat.room.url>https://127.0.0.1:8443/v1/users/videochat/room</api.rest.videochat.room.url>
	</properties>
	
	<dependencies>
		<!-- Logging APIs -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
		</dependency>
		<!-- Logback's conditional statements evaluation used in logback.xml -->
		<dependency>
			<groupId>org.codehaus.janino</groupId>
			<artifactId>janino</artifactId>
			<!-- The org.codehaus.janino:commons-compiler:3.0.6 dependency will be -->
			<!-- automatically pulled in by Maven's transitivity rules -->
		</dependency>
		<!-- JWT -->
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>${auth0.jwt.version}</version>
		</dependency>
		<!-- NextRTC Signaling Server -->
		<dependency>
			<groupId>org.nextrtc.signalingserver</groupId>
			<artifactId>nextrtc-signaling-server</artifactId>
			<version>${nextrtc.signaling.server.version}</version>
		</dependency>
		<!-- Spring Boot's dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-websocket</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- Library which provides tag c for jsp pages. Eg: general-error.jsp -->
		<dependency>
			<!--groupId>jstl</groupId-->
			<!--groupId>javax.servlet.jsp.jstl</groupId-->
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<!-- Library needed by jstl implementation -->
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.2.1-b03</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	
	<!-- Multi Profiles: per environment and per event bus type -->
	<profiles>
		<profile>
			<id>local</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<app.allow.insecure.path>true</app.allow.insecure.path>
				<private.key.jwt>jwt_local_private.der</private.key.jwt>
				<public.key.jwt>jwt_local_public.der</public.key.jwt>
				<nextrtc.ping_period>10</nextrtc.ping_period>
				<nextrtc.pong_enabled>true</nextrtc.pong_enabled>
				<nextrtc.scheduler_size>2</nextrtc.scheduler_size>
			</properties>
		</profile>
		<profile>
			<id>eventbus-local</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<spring.profiles.active>eventbus-local</spring.profiles.active>
			</properties>
			<dependencies>
				<dependency>
					<groupId>com.hazelcast</groupId>
					<artifactId>hazelcast</artifactId>
					<scope>provided</scope> <!-- codes compiles, but not included in the final jar -->
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>eventbus-hazelcast</id>
			<properties>
				<spring.profiles.active>eventbus-hazelcast</spring.profiles.active>
			</properties>
			<dependencies>
				<dependency>
					<groupId>com.hazelcast</groupId>
					<artifactId>hazelcast</artifactId>
				</dependency>
			</dependencies>
		</profile>
		<profile>
			<id>Windows</id>
			<activation>
				<os>
					<family>Windows</family>
				</os>
			</activation>
			<properties>
				<script.extension>.bat</script.extension>
				<skip.chmod>true</skip.chmod>
			</properties>
		</profile>
		<profile>
			<id>Unix</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<script.extension>.sh</script.extension>
				<skip.chmod>false</skip.chmod>
			</properties>
		</profile>
	</profiles>
	
	<build>
		<finalName>signaling</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<excludes>
					<exclude>profiles/*</exclude>
					<exclude>scripts/*</exclude>
					<exclude>*.der</exclude>
					<exclude>*.key</exclude>
					<exclude>*.jks</exclude>
					<exclude>*.pem</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
				<includes>
					<include>*.jks</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>com.coderplus.maven.plugins</groupId>
				<artifactId>copy-rename-maven-plugin</artifactId>
				<version>1.0.1</version>
				<executions>
					<execution>
						<id>rename-file-jwt-private-key</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<sourceFile>${project.basedir}/src/main/resources/profiles/${private.key.jwt}</sourceFile>
							<destinationFile>${project.build.outputDirectory}/jwt_private.key</destinationFile>
						</configuration>
					</execution>
					<execution>
						<id>rename-file-jwt-public-key</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<sourceFile>${project.basedir}/src/main/resources/profiles/${public.key.jwt}</sourceFile>
							<destinationFile>${project.build.outputDirectory}/jwt_public.key</destinationFile>
						</configuration>
					</execution>
					<!-- copy Docker related files to target -->
					<execution>
						<id>copy-docker-files</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<sourceFile>${project.basedir}/src/main/docker/.dockerignore</sourceFile>
									<destinationFile>${project.build.directory}/.dockerignore</destinationFile>
								</fileSet>
								<fileSet>
									<sourceFile>${project.basedir}/src/main/docker/Dockerfile</sourceFile>
									<destinationFile>${project.build.directory}/Dockerfile</destinationFile>
								</fileSet>
								<fileSet>
									<sourceFile>${project.basedir}/src/main/docker/docker-build${script.extension}</sourceFile>
									<destinationFile>${project.build.directory}/docker-build${script.extension}</destinationFile>
								</fileSet>
							</fileSets>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.1.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<skip>${skip.proguard}</skip>
					<proguardVersion>6.1.1</proguardVersion>
					<proguardInclude>${basedir}/proguard.conf</proguardInclude>
					<outputDirectory>${project.build.directory}</outputDirectory>
					<injar>${project.build.finalName}.war</injar>
					<inFilter>!WEB-INF/lib/*</inFilter>
					<outjar>${project.build.finalName}.war</outjar>
					<options>
						<option>-target ${maven.compiler.target}</option>
					</options>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>6.1.1</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
			</plugin>
			<!-- If using Proguard Maven plugin then put the spring-boot-maven-plugin after proguard plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<mainClass>${start-class}</mainClass>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
					</archive>
					<webResources>
						<resource>
							<filtering>true</filtering>
							<directory>src/main/webapp</directory>
							<includes>
								<include>js/common.js</include>
								<include>videochat.html</include>
								<include>callTo.html</include>
							</includes>
						</resource>
					</webResources>
				</configuration>
	        </plugin>
	        <plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>chmod for sh script</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<skip>${skip.chmod}</skip>
							<executable>chmod</executable>
							<commandlineArgs>+x ${project.build.directory}/docker-build${script.extension}</commandlineArgs>
						</configuration>
					</execution>
					<execution>
						<id>decompress ${project.build.finalName}.war and build Docker image</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<skip>${skip.docker.build}</skip>
							<executable>${project.build.directory}/docker-build${script.extension}</executable>
							<commandlineArgs>${project.build.finalName} dev</commandlineArgs>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<version>4.3.0</version>
				<configuration>
					<timestampFormat>EpochMillis</timestampFormat>
					<!-- token provided by -D argument on .travis.yml from environment variable set up on Travis CI settings -->
					<repoToken></repoToken>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
</project>
